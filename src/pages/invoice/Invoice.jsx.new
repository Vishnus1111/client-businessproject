import React, { useState, useEffect } from 'react';
import axios from 'axios';
import styles from './Invoice.module.css';
import InvoiceView from './InvoiceView';
import { API_BASE_URL } from '../config';

const Invoice = () => {
  const [invoices, setInvoices] = useState([]);
  const [statistics, setStatistics] = useState({
    recentTransactions: 0,
    totalInvoices: { total: 0, processed: 0 },
    paidAmount: { amount: 0, customers: 0 },
    unpaidAmount: { amount: 0, pending: 0 }
  });
  const [selectedInvoice, setSelectedInvoice] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Format currency with Indian Rupee symbol
  const formatCurrency = (amount) => {
    return `₹${parseFloat(amount || 0).toLocaleString()}`;
  };

  // Format date in DD-MMM-YY format
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-GB', {
      day: '2-digit',
      month: 'short',
      year: '2-digit'
    });
  };

  useEffect(() => {
    const fetchInvoices = async () => {
      try {
        setLoading(true);
        const response = await axios.get(`${API_BASE_URL}/api/invoices`);
        
        if (response.data.success) {
          setInvoices(response.data.invoices);
          
          // Calculate statistics
          const now = new Date();
          const sevenDaysAgo = new Date(now);
          sevenDaysAgo.setDate(now.getDate() - 7);
          
          // Recent transactions (last 7 days)
          const recentInvoices = response.data.invoices.filter(invoice => 
            new Date(invoice.createdAt) >= sevenDaysAgo
          );
          
          // Total, paid and unpaid invoices
          const paid = response.data.invoices.filter(invoice => invoice.status === 'Paid');
          const unpaid = response.data.invoices.filter(invoice => invoice.status === 'Unpaid');
          
          // Calculate total amounts
          const paidAmount = paid.reduce((total, invoice) => total + invoice.totalAmount, 0);
          const unpaidAmount = unpaid.reduce((total, invoice) => total + invoice.totalAmount, 0);
          
          setStatistics({
            recentTransactions: recentInvoices.length,
            totalInvoices: { 
              total: response.data.invoices.length, 
              processed: paid.length 
            },
            paidAmount: { 
              amount: paidAmount, 
              customers: paid.length 
            },
            unpaidAmount: { 
              amount: unpaidAmount, 
              pending: unpaid.length 
            }
          });
        } else {
          setError("Failed to fetch invoices");
        }
      } catch (err) {
        setError("Error fetching data from the server");
        console.error("Error fetching invoices:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchInvoices();
  }, []);

  const handleViewInvoice = (invoice) => {
    setSelectedInvoice(invoice);
  };

  const closeInvoiceView = () => {
    setSelectedInvoice(null);
  };

  return (
    <div className={styles.invoiceContainer}>
      <div className={styles.header}>
        <h1 className={styles.pageTitle}>Invoice</h1>
        <div className={styles.searchContainer}>
          <input type="text" placeholder="Search here..." className={styles.searchInput} />
          <button className={styles.searchButton}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
            </svg>
          </button>
        </div>
      </div>

      <div className={styles.dashboard}>
        <h2 className={styles.dashboardTitle}>Overall Invoice</h2>
        
        <div className={styles.statsContainer}>
          <div className={styles.statCard}>
            <h3>Recent Transactions</h3>
            <div className={styles.statValue}>{statistics.recentTransactions}</div>
            <div className={styles.statSubtext}>Last 7 days</div>
          </div>
          
          <div className={styles.statCard}>
            <h3>Total Invoices</h3>
            <div className={styles.dualStat}>
              <div className={styles.statValue}>{statistics.totalInvoices.total}</div>
              <div className={styles.statSecondary}>{statistics.totalInvoices.processed}</div>
            </div>
            <div className={styles.dualStatLabel}>
              <span>Last 7 days</span>
              <span>Processed</span>
            </div>
          </div>
          
          <div className={styles.statCard}>
            <h3>Paid Amount</h3>
            <div className={styles.dualStat}>
              <div className={styles.statValue}>{formatCurrency(statistics.paidAmount.amount)}</div>
              <div className={styles.statSecondary}>{statistics.paidAmount.customers}</div>
            </div>
            <div className={styles.dualStatLabel}>
              <span>Last 7 days</span>
              <span>customers</span>
            </div>
          </div>
          
          <div className={styles.statCard}>
            <h3>Unpaid Amount</h3>
            <div className={styles.dualStat}>
              <div className={styles.statValue}>{formatCurrency(statistics.unpaidAmount.amount)}</div>
              <div className={styles.statSecondary}>{statistics.unpaidAmount.pending}</div>
            </div>
            <div className={styles.dualStatLabel}>
              <span>Ordered</span>
              <span>Pending Payment</span>
            </div>
          </div>
        </div>
      </div>

      <div className={styles.invoiceListContainer}>
        <h2 className={styles.listTitle}>Invoices List</h2>
        
        {loading ? (
          <div className={styles.loading}>Loading invoices...</div>
        ) : error ? (
          <div className={styles.error}>{error}</div>
        ) : (
          <div className={styles.tableContainer}>
            <table className={styles.invoiceTable}>
              <thead>
                <tr>
                  <th>Invoice ID</th>
                  <th>Reference Number</th>
                  <th>Amount (₹)</th>
                  <th>Status</th>
                  <th>Due Date</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                {invoices.map((invoice) => (
                  <tr key={invoice._id}>
                    <td>{invoice.invoiceId}</td>
                    <td>{invoice.referenceNumber}</td>
                    <td>{formatCurrency(invoice.totalAmount)}</td>
                    <td>
                      <span className={`${styles.status} ${styles[invoice.status.toLowerCase()]}`}>
                        {invoice.status}
                      </span>
                    </td>
                    <td>{formatDate(invoice.dueDate)}</td>
                    <td>
                      <button 
                        className={styles.actionButton}
                        onClick={() => handleViewInvoice(invoice)}
                      >
                        ⋮
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        
        <div className={styles.pagination}>
          <button className={styles.paginationButton}>Previous</button>
          <div className={styles.pageInfo}>Page 1 of 10</div>
          <button className={styles.paginationButton}>Next</button>
        </div>
      </div>
      
      {selectedInvoice && (
        <InvoiceView 
          invoice={selectedInvoice} 
          onClose={closeInvoiceView} 
        />
      )}
    </div>
  );
};

export default Invoice;
